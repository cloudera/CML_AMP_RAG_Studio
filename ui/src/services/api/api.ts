/* eslint-disable */
/**
 * RAG Studio API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DataSource
 */
export interface DataSource {
    /**
     * Data source ID
     * @type {number}
     * @memberof DataSource
     */
    'id': number;
    /**
     * Data source name
     * @type {string}
     * @memberof DataSource
     */
    'name': string;
    /**
     * Data source creation timestamp
     * @type {string}
     * @memberof DataSource
     */
    'time_created': string;
    /**
     * Data source update timestamp
     * @type {string}
     * @memberof DataSource
     */
    'time_updated': string;
    /**
     * Data source creator ID
     * @type {string}
     * @memberof DataSource
     */
    'created_by_id': string;
    /**
     * Data source updater ID
     * @type {string}
     * @memberof DataSource
     */
    'updated_by_id': string;
    /**
     * 
     * @type {DataSourceConfiguration}
     * @memberof DataSource
     */
    'configuration': DataSourceConfiguration;
    /**
     * 
     * @type {DataSourceStatus}
     * @memberof DataSource
     */
    'status': DataSourceStatus;
}
/**
 * 
 * @export
 * @interface DataSourceConfiguration
 */
export interface DataSourceConfiguration {
    /**
     * Data source connection type
     * @type {string}
     * @memberof DataSourceConfiguration
     */
    'connection_type': DataSourceConfigurationConnectionTypeEnum;
    /**
     * Data source chunk size
     * @type {number}
     * @memberof DataSourceConfiguration
     */
    'chunk_size': number;
    /**
     * Data source chunk overlap percentage
     * @type {number}
     * @memberof DataSourceConfiguration
     */
    'chunk_overlap_percent': number;
}

export const DataSourceConfigurationConnectionTypeEnum = {
    Manual: 'MANUAL',
    Cdf: 'CDF',
    Api: 'API',
    Other: 'OTHER'
} as const;

export type DataSourceConfigurationConnectionTypeEnum = typeof DataSourceConfigurationConnectionTypeEnum[keyof typeof DataSourceConfigurationConnectionTypeEnum];

/**
 * 
 * @export
 * @interface DataSourceCreateRequest
 */
export interface DataSourceCreateRequest {
    /**
     * Data source name
     * @type {string}
     * @memberof DataSourceCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {DataSourceConfiguration}
     * @memberof DataSourceCreateRequest
     */
    'configuration': DataSourceConfiguration;
}
/**
 * 
 * @export
 * @interface DataSourceFile
 */
export interface DataSourceFile {
    /**
     * Unique identifier for the file
     * @type {string}
     * @memberof DataSourceFile
     */
    'id': string;
    /**
     * The date and time when the file was created
     * @type {string}
     * @memberof DataSourceFile
     */
    'time_created': string;
    /**
     * The date and time when the file was last updated
     * @type {string}
     * @memberof DataSourceFile
     */
    'time_updated': string;
    /**
     * ID of the user who created the file
     * @type {string}
     * @memberof DataSourceFile
     */
    'created_by_id': string;
    /**
     * ID of the user who last updated the file
     * @type {string}
     * @memberof DataSourceFile
     */
    'updated_by_id': string;
    /**
     * Name of the File
     * @type {string}
     * @memberof DataSourceFile
     */
    'filename': string;
    /**
     * ID of the data source the file belongs to
     * @type {number}
     * @memberof DataSourceFile
     */
    'data_source_id': number;
    /**
     * ID of the document in the data source
     * @type {string}
     * @memberof DataSourceFile
     */
    'document_id': string;
    /**
     * Path to the file in S3
     * @type {string}
     * @memberof DataSourceFile
     */
    's3_path': string;
    /**
     * Size of the file in bytes
     * @type {number}
     * @memberof DataSourceFile
     */
    'size_in_bytes': number;
    /**
     * Extension of the file
     * @type {string}
     * @memberof DataSourceFile
     */
    'extension': string;
    /**
     * The date and time when the vector embedding was created
     * @type {string}
     * @memberof DataSourceFile
     */
    'vector_upload_timestamp'?: string;
    /**
     * The date and time when the file summary was created
     * @type {string}
     * @memberof DataSourceFile
     */
    'summary_creation_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface DataSourceFiles
 */
export interface DataSourceFiles {
    /**
     * 
     * @type {Array<DataSourceFile>}
     * @memberof DataSourceFiles
     */
    'items': Array<DataSourceFile>;
}
/**
 * 
 * @export
 * @interface DataSourceList
 */
export interface DataSourceList {
    /**
     * 
     * @type {Array<DataSource>}
     * @memberof DataSourceList
     */
    'items': Array<DataSource>;
}
/**
 * 
 * @export
 * @interface DataSourceStatus
 */
export interface DataSourceStatus {
    /**
     * Number of documents in the data source
     * @type {number}
     * @memberof DataSourceStatus
     */
    'document_count': number;
    /**
     * Total size of documents in the data source in bytes
     * @type {number}
     * @memberof DataSourceStatus
     */
    'total_doc_size': number;
}
/**
 * 
 * @export
 * @interface DataSourceUpdateRequest
 */
export interface DataSourceUpdateRequest {
    /**
     * Data source name
     * @type {string}
     * @memberof DataSourceUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {DataSourceConfiguration}
     * @memberof DataSourceUpdateRequest
     */
    'configuration'?: DataSourceConfiguration;
}
/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {number}
     * @memberof Session
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    'name': string;
    /**
     * Session creation timestamp
     * @type {string}
     * @memberof Session
     */
    'time_created': string;
    /**
     * Session update timestamp
     * @type {string}
     * @memberof Session
     */
    'time_updated': string;
    /**
     * Session creator ID
     * @type {string}
     * @memberof Session
     */
    'created_by_id': string;
    /**
     * Session updater ID
     * @type {string}
     * @memberof Session
     */
    'updated_by_id': string;
    /**
     * Session last interaction timestamp
     * @type {string}
     * @memberof Session
     */
    'last_interaction_time'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof Session
     */
    'data_source_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface SessionCreateRequest
 */
export interface SessionCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionCreateRequest
     */
    'name': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof SessionCreateRequest
     */
    'data_source_ids': Array<number>;
}
/**
 * 
 * @export
 * @interface SessionList
 */
export interface SessionList {
    /**
     * 
     * @type {Array<Session>}
     * @memberof SessionList
     */
    'items': Array<Session>;
}
/**
 * 
 * @export
 * @interface SessionUpdateRequest
 */
export interface SessionUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SessionUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof SessionUpdateRequest
     */
    'data_source_ids'?: Array<number>;
}

/**
 * DataSourceApi - axios parameter creator
 * @export
 */
export const DataSourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a data source
         * @param {DataSourceCreateRequest} dataSourceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSource: async (dataSourceCreateRequest: DataSourceCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceCreateRequest' is not null or undefined
            assertParamExists('createDataSource', 'dataSourceCreateRequest', dataSourceCreateRequest)
            const localVarPath = `/rag/data_sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dataSourceCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSource: async (dataSourceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('deleteDataSource', 'dataSourceId', dataSourceId)
            const localVarPath = `/rag/data_sources/{data_source_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSource: async (dataSourceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getDataSource', 'dataSourceId', dataSourceId)
            const localVarPath = `/rag/data_sources/{data_source_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSources: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rag/data_sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a data source
         * @param {number} dataSourceId 
         * @param {DataSourceUpdateRequest} dataSourceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSource: async (dataSourceId: number, dataSourceUpdateRequest: DataSourceUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('updateDataSource', 'dataSourceId', dataSourceId)
            // verify required parameter 'dataSourceUpdateRequest' is not null or undefined
            assertParamExists('updateDataSource', 'dataSourceUpdateRequest', dataSourceUpdateRequest)
            const localVarPath = `/rag/data_sources/{data_source_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dataSourceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataSourceApi - functional programming interface
 * @export
 */
export const DataSourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataSourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a data source
         * @param {DataSourceCreateRequest} dataSourceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDataSource(dataSourceCreateRequest: DataSourceCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDataSource(dataSourceCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceApi.createDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDataSource(dataSourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceApi.deleteDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataSource(dataSourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceApi.getDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDataSources(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDataSources(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceApi.listDataSources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a data source
         * @param {number} dataSourceId 
         * @param {DataSourceUpdateRequest} dataSourceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDataSource(dataSourceId: number, dataSourceUpdateRequest: DataSourceUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDataSource(dataSourceId, dataSourceUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceApi.updateDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataSourceApi - factory interface
 * @export
 */
export const DataSourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataSourceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a data source
         * @param {DataSourceCreateRequest} dataSourceCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataSource(dataSourceCreateRequest: DataSourceCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DataSource> {
            return localVarFp.createDataSource(dataSourceCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDataSource(dataSourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a data source
         * @param {number} dataSourceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): AxiosPromise<DataSource> {
            return localVarFp.getDataSource(dataSourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List data sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataSources(options?: RawAxiosRequestConfig): AxiosPromise<DataSourceList> {
            return localVarFp.listDataSources(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a data source
         * @param {number} dataSourceId 
         * @param {DataSourceUpdateRequest} dataSourceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataSource(dataSourceId: number, dataSourceUpdateRequest: DataSourceUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DataSource> {
            return localVarFp.updateDataSource(dataSourceId, dataSourceUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataSourceApi - object-oriented interface
 * @export
 * @class DataSourceApi
 * @extends {BaseAPI}
 */
export class DataSourceApi extends BaseAPI {
    /**
     * 
     * @summary Create a data source
     * @param {DataSourceCreateRequest} dataSourceCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceApi
     */
    public createDataSource(dataSourceCreateRequest: DataSourceCreateRequest, options?: RawAxiosRequestConfig) {
        return DataSourceApiFp(this.configuration).createDataSource(dataSourceCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a data source
     * @param {number} dataSourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceApi
     */
    public deleteDataSource(dataSourceId: number, options?: RawAxiosRequestConfig) {
        return DataSourceApiFp(this.configuration).deleteDataSource(dataSourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a data source
     * @param {number} dataSourceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceApi
     */
    public getDataSource(dataSourceId: number, options?: RawAxiosRequestConfig) {
        return DataSourceApiFp(this.configuration).getDataSource(dataSourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceApi
     */
    public listDataSources(options?: RawAxiosRequestConfig) {
        return DataSourceApiFp(this.configuration).listDataSources(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a data source
     * @param {number} dataSourceId 
     * @param {DataSourceUpdateRequest} dataSourceUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceApi
     */
    public updateDataSource(dataSourceId: number, dataSourceUpdateRequest: DataSourceUpdateRequest, options?: RawAxiosRequestConfig) {
        return DataSourceApiFp(this.configuration).updateDataSource(dataSourceId, dataSourceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataSourceFilesApi - axios parameter creator
 * @export
 */
export const DataSourceFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileInDataSource: async (dataSourceId: number, fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('deleteFileInDataSource', 'dataSourceId', dataSourceId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFileInDataSource', 'fileId', fileId)
            const localVarPath = `/rag/data_sources/{data_source_id}/files/{file_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileInDataSource: async (dataSourceId: number, fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('downloadFileInDataSource', 'dataSourceId', dataSourceId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('downloadFileInDataSource', 'fileId', fileId)
            const localVarPath = `/rag/data_sources/{data_source_id}/files/{file_id}/download`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInDataSource: async (dataSourceId: number, fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('getFileInDataSource', 'dataSourceId', dataSourceId)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getFileInDataSource', 'fileId', fileId)
            const localVarPath = `/rag/data_sources/{data_source_id}/files/{file_id}`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)))
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List files in a data source
         * @param {number} dataSourceId The ID of the data source to get the files from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesInDataSource: async (dataSourceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('listFilesInDataSource', 'dataSourceId', dataSourceId)
            const localVarPath = `/rag/data_sources/{data_source_id}/files`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a file to a data source
         * @param {number} dataSourceId The ID of the data source to upload the file to
         * @param {File} file The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileToDataSource: async (dataSourceId: number, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSourceId' is not null or undefined
            assertParamExists('uploadFileToDataSource', 'dataSourceId', dataSourceId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFileToDataSource', 'file', file)
            const localVarPath = `/rag/data_sources/{data_source_id}/files`
                .replace(`{${"data_source_id"}}`, encodeURIComponent(String(dataSourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataSourceFilesApi - functional programming interface
 * @export
 */
export const DataSourceFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataSourceFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileInDataSource(dataSourceId, fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceFilesApi.deleteFileInDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileInDataSource(dataSourceId, fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceFilesApi.downloadFileInDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileInDataSource(dataSourceId, fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceFilesApi.getFileInDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List files in a data source
         * @param {number} dataSourceId The ID of the data source to get the files from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesInDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceFiles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFilesInDataSource(dataSourceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceFilesApi.listFilesInDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a file to a data source
         * @param {number} dataSourceId The ID of the data source to upload the file to
         * @param {File} file The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileToDataSource(dataSourceId: number, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileToDataSource(dataSourceId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataSourceFilesApi.uploadFileToDataSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataSourceFilesApi - factory interface
 * @export
 */
export const DataSourceFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataSourceFilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFileInDataSource(dataSourceId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadFileInDataSource(dataSourceId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a file in a data source
         * @param {number} dataSourceId 
         * @param {string} fileId The ID of the file to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<DataSourceFile> {
            return localVarFp.getFileInDataSource(dataSourceId, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List files in a data source
         * @param {number} dataSourceId The ID of the data source to get the files from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesInDataSource(dataSourceId: number, options?: RawAxiosRequestConfig): AxiosPromise<DataSourceFiles> {
            return localVarFp.listFilesInDataSource(dataSourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a file to a data source
         * @param {number} dataSourceId The ID of the data source to upload the file to
         * @param {File} file The file to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileToDataSource(dataSourceId: number, file: File, options?: RawAxiosRequestConfig): AxiosPromise<DataSourceFile> {
            return localVarFp.uploadFileToDataSource(dataSourceId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataSourceFilesApi - object-oriented interface
 * @export
 * @class DataSourceFilesApi
 * @extends {BaseAPI}
 */
export class DataSourceFilesApi extends BaseAPI {
    /**
     * 
     * @summary Delete a file in a data source
     * @param {number} dataSourceId 
     * @param {string} fileId The ID of the file to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceFilesApi
     */
    public deleteFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig) {
        return DataSourceFilesApiFp(this.configuration).deleteFileInDataSource(dataSourceId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download a file in a data source
     * @param {number} dataSourceId 
     * @param {string} fileId The ID of the file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceFilesApi
     */
    public downloadFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig) {
        return DataSourceFilesApiFp(this.configuration).downloadFileInDataSource(dataSourceId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a file in a data source
     * @param {number} dataSourceId 
     * @param {string} fileId The ID of the file to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceFilesApi
     */
    public getFileInDataSource(dataSourceId: number, fileId: string, options?: RawAxiosRequestConfig) {
        return DataSourceFilesApiFp(this.configuration).getFileInDataSource(dataSourceId, fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List files in a data source
     * @param {number} dataSourceId The ID of the data source to get the files from
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceFilesApi
     */
    public listFilesInDataSource(dataSourceId: number, options?: RawAxiosRequestConfig) {
        return DataSourceFilesApiFp(this.configuration).listFilesInDataSource(dataSourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a file to a data source
     * @param {number} dataSourceId The ID of the data source to upload the file to
     * @param {File} file The file to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceFilesApi
     */
    public uploadFileToDataSource(dataSourceId: number, file: File, options?: RawAxiosRequestConfig) {
        return DataSourceFilesApiFp(this.configuration).uploadFileToDataSource(dataSourceId, file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (sessionCreateRequest: SessionCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionCreateRequest' is not null or undefined
            assertParamExists('createSession', 'sessionCreateRequest', sessionCreateRequest)
            const localVarPath = `/rag/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession: async (sessionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('deleteSession', 'sessionId', sessionId)
            const localVarPath = `/rag/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (sessionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getSession', 'sessionId', sessionId)
            const localVarPath = `/rag/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rag/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a session
         * @param {number} sessionId 
         * @param {SessionUpdateRequest} sessionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSession: async (sessionId: number, sessionUpdateRequest: SessionUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('updateSession', 'sessionId', sessionId)
            // verify required parameter 'sessionUpdateRequest' is not null or undefined
            assertParamExists('updateSession', 'sessionUpdateRequest', sessionUpdateRequest)
            const localVarPath = `/rag/sessions/{session_id}`
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sessionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(sessionCreateRequest: SessionCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(sessionCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSession(sessionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.deleteSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(sessionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.getSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.listSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a session
         * @param {number} sessionId 
         * @param {SessionUpdateRequest} sessionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSession(sessionId: number, sessionUpdateRequest: SessionUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSession(sessionId, sessionUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SessionApi.updateSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a session
         * @param {SessionCreateRequest} sessionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(sessionCreateRequest: SessionCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.createSession(sessionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession(sessionId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSession(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a session
         * @param {number} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(sessionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.getSession(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions(options?: RawAxiosRequestConfig): AxiosPromise<SessionList> {
            return localVarFp.listSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a session
         * @param {number} sessionId 
         * @param {SessionUpdateRequest} sessionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSession(sessionId: number, sessionUpdateRequest: SessionUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Session> {
            return localVarFp.updateSession(sessionId, sessionUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI {
    /**
     * 
     * @summary Create a session
     * @param {SessionCreateRequest} sessionCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public createSession(sessionCreateRequest: SessionCreateRequest, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).createSession(sessionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a session
     * @param {number} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public deleteSession(sessionId: number, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).deleteSession(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a session
     * @param {number} sessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public getSession(sessionId: number, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).getSession(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public listSessions(options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).listSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a session
     * @param {number} sessionId 
     * @param {SessionUpdateRequest} sessionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public updateSession(sessionId: number, sessionUpdateRequest: SessionUpdateRequest, options?: RawAxiosRequestConfig) {
        return SessionApiFp(this.configuration).updateSession(sessionId, sessionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



